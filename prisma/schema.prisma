generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  subscriptionTier   String    @default("starter")
  stripeCustomerId   String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  recipeAnalyses RecipeAnalysis[]
  usageLogs      UsageLog[]
  subscriptions  Subscription[]
  seoTemplates   SeoTemplate[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RecipeAnalysis {
  id                      String   @id @default(cuid())
  userId                  String
  recipeUrl               String   @db.VarChar(1000)
  originalTitle           String?  @db.VarChar(500)
  optimizedTitle          String?  @db.VarChar(500)
  originalDescription     String?  @db.Text
  optimizedDescription    String?  @db.Text
  seoScore                Int?
  targetKeywords          Json?
  suggestedKeywords       Json?
  competitorAnalysis      Json?
  schemaMarkup            String?  @db.Text
  optimizationSuggestions Json?
  createdAt               DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model UsageLog {
  id           String   @id @default(cuid())
  userId       String
  action       String   @db.VarChar(100)
  resourceUsed String   @db.VarChar(100)
  metadata     Json?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([action])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String
  stripeSubscriptionId String    @unique
  status               String    @db.VarChar(50)
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  planId               String    @db.VarChar(100)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model SeoTemplate {
  id           String   @id @default(cuid())
  userId       String
  templateName String   @db.VarChar(255)
  templateType String   @db.VarChar(100)
  content      Json
  isPublic     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([templateType])
}
